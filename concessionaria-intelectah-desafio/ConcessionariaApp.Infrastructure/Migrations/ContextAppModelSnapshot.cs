// <auto-generated />
using System;
using ConcessionariaApp.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConcessionariaApp.Infrastructure.Migrations
{
    [DbContext(typeof(ContextApp))]
    partial class ContextAppModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("ClienteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Concessionaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacidadeMaximaVeiculos")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("ConcessionariaId");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_Concessionaria_Nome");

                    b.ToTable("Concessionarias");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Fabricante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnoFundacao")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaisOrigem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("FabricanteId");

                    b.ToTable("Fabricantes");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NivelAcesso")
                        .HasColumnType("int");

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("UsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FabricanteId")
                        .HasColumnType("int");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Preco")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TipoVeiculo")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("VeiculoId");

                    b.HasIndex("FabricanteId");

                    b.HasIndex("Modelo")
                        .IsUnique()
                        .HasDatabaseName("IX_Veiculo_Nome");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("ConcessionariaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataVenda")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PrecoVenda")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProtocoloVenda")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("VeiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("VendaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ConcessionariaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Cliente", b =>
                {
                    b.OwnsOne("ConcessionariaApp.Domain.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("Telefone");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("ConcessionariaApp.Domain.ValueObjects.CPF", "Cpf", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)")
                                .HasColumnName("CPF");

                            b1.HasKey("ClienteId");

                            b1.HasIndex("Numero")
                                .IsUnique()
                                .HasDatabaseName("IX_Cliente_CPF");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Concessionaria", b =>
                {
                    b.OwnsOne("ConcessionariaApp.Domain.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<int>("ConcessionariaId")
                                .HasColumnType("int");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("Telefone");

                            b1.HasKey("ConcessionariaId");

                            b1.ToTable("Concessionarias");

                            b1.WithOwner()
                                .HasForeignKey("ConcessionariaId");
                        });

                    b.OwnsOne("ConcessionariaApp.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("ConcessionariaId")
                                .HasColumnType("int");

                            b1.Property<string>("EnderecoEmail")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Email");

                            b1.HasKey("ConcessionariaId");

                            b1.ToTable("Concessionarias");

                            b1.WithOwner()
                                .HasForeignKey("ConcessionariaId");
                        });

                    b.OwnsOne("ConcessionariaApp.Domain.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("ConcessionariaId")
                                .HasColumnType("int");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("Cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("EnderecoCompleto")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Endereco");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Estado");

                            b1.HasKey("ConcessionariaId");

                            b1.ToTable("Concessionarias");

                            b1.WithOwner()
                                .HasForeignKey("ConcessionariaId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Veiculo", b =>
                {
                    b.HasOne("ConcessionariaApp.Domain.Entities.Fabricante", "Fabricante")
                        .WithMany("Veiculos")
                        .HasForeignKey("FabricanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fabricante");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Venda", b =>
                {
                    b.HasOne("ConcessionariaApp.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Vendas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcessionariaApp.Domain.Entities.Concessionaria", "Concessionaria")
                        .WithMany("Vendas")
                        .HasForeignKey("ConcessionariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcessionariaApp.Domain.Entities.Veiculo", "Veiculo")
                        .WithMany("Vendas")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Concessionaria");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Concessionaria", b =>
                {
                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Fabricante", b =>
                {
                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("ConcessionariaApp.Domain.Entities.Veiculo", b =>
                {
                    b.Navigation("Vendas");
                });
#pragma warning restore 612, 618
        }
    }
}
